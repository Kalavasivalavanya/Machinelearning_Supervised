{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1X_H2iiLQNcSNAB8GgUbnjvcnFBtW6kUb","timestamp":1681888656392},{"file_id":"1gkZZ7nO50dzp1j6Xucb87ql2D7iq_ehj","timestamp":1681722234411},{"file_id":"1kW7eJ3YaEpXq6urTRVK_QlX1fEhch_9D","timestamp":1681479654984}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# this needs to be run for each new runtime\n","# because colab has scikit-learn 1.0.2 pre-installed \n","# and we need newer version (1.2.0 and higher)\n","# to use .set_output() method\n","!pip install scikit-learn --upgrade\n","\n","# if you plan on running the whole notebook again during the same runtime\n","# you can comment the line above"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aZEQ4vW621FU","executionInfo":{"status":"ok","timestamp":1681980317098,"user_tz":-120,"elapsed":11412,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"f6b7d8db-4210-4f02-fc7b-2298c87688e5"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.9/dist-packages (1.2.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (3.1.0)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (1.10.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (1.2.0)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.9/dist-packages (from scikit-learn) (1.22.4)\n"]}]},{"cell_type":"markdown","source":["# Housing Prices: Decision Trees\n","\n","**Dataset variables:**\n","\n","*  LotArea\n","*  LotFrontAge\n","*  TotalBsmtSf\n","*  BedroomAbvGr\n","*  Fireplaces\n","*  PoolArea\n","*  GarageCars\n","*  WoodDeckSF\n","*  ScreenPorch\n","*  Expensive\n"],"metadata":{"id":"MTsXzsdsIxay"}},{"cell_type":"markdown","source":["## 1. Read the data"],"metadata":{"id":"DIZAAfhfI2xN"}},{"cell_type":"code","source":["import pandas as pd\n","housing = pd.read_csv('https://raw.githubusercontent.com/JoanClaverol/housing_data/main/housing-classification-iter-0-2.csv')\n","housing.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"QZVkg04BeCly","executionInfo":{"status":"ok","timestamp":1681980318974,"user_tz":-120,"elapsed":1882,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"d5f8d3ab-c206-4557-b247-de83cca0e518"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   LotArea  LotFrontage  TotalBsmtSF  BedroomAbvGr  Fireplaces  PoolArea  \\\n","0     8450         65.0          856             3           0         0   \n","1     9600         80.0         1262             3           1         0   \n","2    11250         68.0          920             3           1         0   \n","3     9550         60.0          756             3           1         0   \n","4    14260         84.0         1145             4           1         0   \n","\n","   GarageCars  WoodDeckSF  ScreenPorch  Expensive  \n","0           2           0            0          0  \n","1           2         298            0          0  \n","2           2           0            0          0  \n","3           3           0            0          0  \n","4           3         192            0          0  "],"text/html":["\n","  <div id=\"df-5791742e-6977-4e6b-bb1f-32772bbf5c55\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LotArea</th>\n","      <th>LotFrontage</th>\n","      <th>TotalBsmtSF</th>\n","      <th>BedroomAbvGr</th>\n","      <th>Fireplaces</th>\n","      <th>PoolArea</th>\n","      <th>GarageCars</th>\n","      <th>WoodDeckSF</th>\n","      <th>ScreenPorch</th>\n","      <th>Expensive</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>8450</td>\n","      <td>65.0</td>\n","      <td>856</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>9600</td>\n","      <td>80.0</td>\n","      <td>1262</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>298</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11250</td>\n","      <td>68.0</td>\n","      <td>920</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9550</td>\n","      <td>60.0</td>\n","      <td>756</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>14260</td>\n","      <td>84.0</td>\n","      <td>1145</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>192</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5791742e-6977-4e6b-bb1f-32772bbf5c55')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5791742e-6977-4e6b-bb1f-32772bbf5c55 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5791742e-6977-4e6b-bb1f-32772bbf5c55');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["## 2. Define X and y"],"metadata":{"id":"d-LUectTI9pc"}},{"cell_type":"code","source":["Y = housing.pop(\"Expensive\")\n","X = housing"],"metadata":{"id":"Z5pIsMezJScJ","executionInfo":{"status":"ok","timestamp":1681980318977,"user_tz":-120,"elapsed":27,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["X.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mmq-LWtuRIJI","executionInfo":{"status":"ok","timestamp":1681980318979,"user_tz":-120,"elapsed":28,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"552c9664-2e14-476e-dfc4-12b2f941ebe8"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1460, 9)"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["### Do we have missing values on this dataset?"],"metadata":{"id":"SgAKV-6Qlr0Z"}},{"cell_type":"code","source":["X.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oi6yUrWSlqq4","executionInfo":{"status":"ok","timestamp":1681980318980,"user_tz":-120,"elapsed":24,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"dde1f1aa-f581-4cb5-a362-ca2459f07d9e"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LotArea           0\n","LotFrontage     259\n","TotalBsmtSF       0\n","BedroomAbvGr      0\n","Fireplaces        0\n","PoolArea          0\n","GarageCars        0\n","WoodDeckSF        0\n","ScreenPorch       0\n","dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["Y.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LMJU4n2sp5-x","executionInfo":{"status":"ok","timestamp":1681980318981,"user_tz":-120,"elapsed":22,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"a66bcc65-d798-415c-f4dc-b339bc78bf48"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["so we have to impute missing values in X"],"metadata":{"id":"bq7ASgrTb4rN"}},{"cell_type":"markdown","source":["## 3. Data Splitting (Train - Test)"],"metadata":{"id":"M3mzFlGYJkem"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=31416)"],"metadata":{"id":"qIpYym3EJnm-","executionInfo":{"status":"ok","timestamp":1681980319882,"user_tz":-120,"elapsed":921,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["len(X_train), len(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9Wb3VGPSbppW","executionInfo":{"status":"ok","timestamp":1681980319886,"user_tz":-120,"elapsed":28,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"a17b96e3-9e6a-4064-f0a2-0751b3aea489"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1168, 292)"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":[" **Scikit_Learn Pipelines**:The Scikit-learn pipeline is a tool that chains all steps of the workflow together for a more streamlined procedure. The key benefit of building a pipeline is improved readability. Pipelines are able to execute a series of transformations with one call, allowing users to attain results with less code"],"metadata":{"id":"A7-z36RHopSb"}},{"cell_type":"markdown","source":["**Steps to follow:** \n","\n","1. Initialize all the transformers / estimators you want to have in your pipeline, with their appropriate parameters.\n","\n","2. Create a pipeline by chaining the transformers / estimators together\n","\n","3. Fit the pipeline to the training data\n","\n","4. Use your fitted pipeline to make predictions from raw data.\n","\n"],"metadata":{"id":"eokEQfvgYs5_"}},{"cell_type":"code","source":["from sklearn.pipeline import make_pipeline\n","from sklearn.impute import SimpleImputer\n","from sklearn.tree import DecisionTreeClassifier"],"metadata":{"id":"ximTZ5v_ahTu","executionInfo":{"status":"ok","timestamp":1681980319887,"user_tz":-120,"elapsed":22,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"HpC0M7lBl02l","executionInfo":{"status":"ok","timestamp":1681980319889,"user_tz":-120,"elapsed":21,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","execution_count":12,"metadata":{"jupyter":{"outputs_hidden":true},"id":"z7K65vfIUkcP","colab":{"base_uri":"https://localhost:8080/","height":126},"executionInfo":{"status":"ok","timestamp":1681980320873,"user_tz":-120,"elapsed":1004,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"adba8332-279a-4213-dca0-12ca30074cb5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('simpleimputer', SimpleImputer(strategy='median')),\n","                ('decisiontreeclassifier',\n","                 DecisionTreeClassifier(max_depth=5))])"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;simpleimputer&#x27;, SimpleImputer(strategy=&#x27;median&#x27;)),\n","                (&#x27;decisiontreeclassifier&#x27;,\n","                 DecisionTreeClassifier(max_depth=5))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;simpleimputer&#x27;, SimpleImputer(strategy=&#x27;median&#x27;)),\n","                (&#x27;decisiontreeclassifier&#x27;,\n","                 DecisionTreeClassifier(max_depth=5))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=5)</pre></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":12}],"source":["# 1. initialize transformers & model\n","\n","imputer = SimpleImputer(strategy=\"median\")\n","dtree = DecisionTreeClassifier(max_depth=5)\n"," \n","# 2. Create a pipeline*\n","pipe = make_pipeline(imputer, dtree)\n"," \n","# 3. Fit the pipeline to the training data\n","pipe.fit(X = X_train, y = Y_train)\n"," "]},{"cell_type":"code","source":["X_train.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mCfQoZ4M1hvd","executionInfo":{"status":"ok","timestamp":1681980320875,"user_tz":-120,"elapsed":29,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"767cdf58-6cdf-4fa1-dc66-f19ca6e8d21c"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LotArea           0\n","LotFrontage     202\n","TotalBsmtSF       0\n","BedroomAbvGr      0\n","Fireplaces        0\n","PoolArea          0\n","GarageCars        0\n","WoodDeckSF        0\n","ScreenPorch       0\n","dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["### 4. Make Predictions"],"metadata":{"id":"iZcEwN0onyW1"}},{"cell_type":"code","source":["# 4. Use the pipeline to make predictions\n","Y_train_predicted = pipe.predict(X_train)\n","Y_test_predicted = pipe.predict(X_test)"],"metadata":{"id":"PjtzaPuTn2U7","executionInfo":{"status":"ok","timestamp":1681980320876,"user_tz":-120,"elapsed":26,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["### 4.1. check accuracy on the train set"],"metadata":{"id":"3BEZnW2rs9vu"}},{"cell_type":"code","execution_count":15,"metadata":{"id":"Xp2YhgcEUkcP","executionInfo":{"status":"ok","timestamp":1681980320878,"user_tz":-120,"elapsed":27,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e13eae74-7a1c-4b84-f831-4755d59991a3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9460616438356164"]},"metadata":{},"execution_count":15}],"source":["# Check accuracy on the train set\n","from sklearn.metrics import accuracy_score\n","\n","accuracy_score(y_true = Y_train,\n","               y_pred = Y_train_predicted\n","              )"]},{"cell_type":"markdown","source":["The model seems to work REALLY well. Suspiciously well, even. Remember that the model has been trained using the train set and we have now checked its accuracy on the very same train set. The real evaluation will come from the test set."],"metadata":{"id":"HykpFBKPsbyS"}},{"cell_type":"markdown","metadata":{"id":"On80ApfGUkcP"},"source":["## 5. Check accuracy for the test set\n","\n","Is the model able to generalize? Is it able to make predictions on data it has not \"seen\" before?"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"9KiaccjbUkcP","executionInfo":{"status":"ok","timestamp":1681980320879,"user_tz":-120,"elapsed":22,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7b412b35-2129-4e40-9976-7b8633160a2d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9178082191780822"]},"metadata":{},"execution_count":16}],"source":["accuracy_score(y_true = Y_test,\n","               y_pred = Y_test_predicted\n","              )"]}]}